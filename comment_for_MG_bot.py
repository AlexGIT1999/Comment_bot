import logging
import json
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

BOT_TOKEN = config['bot_token']
CHANNEL_ID = config['channel_id']
RULES_TEXT = config['rules_text']

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –º–µ–¥–∏–∞
processed_media_groups = {}

async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
    try:
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ 777000 –∏ sender_chat –Ω–∞—à –∫–∞–Ω–∞–ª
        if (message.from_user and 
            message.from_user.id == 777000 and 
            hasattr(message, 'sender_chat') and 
            message.sender_chat and 
            message.sender_chat.id == CHANNEL_ID):
            
            # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
            media_group_id = getattr(message, 'media_group_id', None)
            if media_group_id:
                # –≠—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞ –º–µ–¥–∏–∞
                post_key = f"media_group_{media_group_id}"
            else:
                # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if hasattr(message, 'forward_from_message_id'):
                    post_key = f"post_{message.forward_from_message_id}"
                else:
                    post_key = f"msg_{message.message_id}"
            
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Å—Ç. –ö–ª—é—á: {post_key}, ID –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {media_group_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç/–∞–ª—å–±–æ–º
            if post_key not in processed_media_groups:
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ—Å—Ç/–∞–ª—å–±–æ–º! –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π) —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
                rules_message = await message.reply_text(
                    RULES_TEXT, 
                    parse_mode='HTML'
                )
                
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                await context.bot.pin_chat_message(
                    chat_id=message.chat.id,
                    message_id=rules_message.message_id,
                    disable_notification=True
                )
                
                # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                processed_media_groups[post_key] = True
                logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {post_key}!")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è
                if len(processed_media_groups) > 1000:
                    oldest_key = next(iter(processed_media_groups))
                    del processed_media_groups[oldest_key]
            else:
                logger.info(f"‚è© –ü–æ—Å—Ç {post_key} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.ALL, handle_channel_post))
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìù –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    application.run_polling()

if __name__ == "__main__":
    main()